var APPWZ;
(function (APPWZ) {
    appRun.$inject = [];
    function appRun() { }
    angular
        .module('AppWooza', ["ui.router"])
        .constant("API", "http://private-59658d-celulardireto2017.apiary-mock.com/")
        .run(appRun);
})(APPWZ || (APPWZ = {}));
var APPWZ;
(function (APPWZ) {
    Router.$inject = ["$stateProvider", "$urlRouterProvider", "$locationProvider"];
    function Router($stateProvider, $urlRouterProvider, $locationProvider) {
        var RoutesStates = [];
        RoutesStates.push({
            name: 'platforms',
            url: '/platforms',
            templateUrl: 'views/platforms.html',
            controller: 'PlatformsController',
            controllerAs: "vm"
        });
        RoutesStates.push({
            name: 'plans',
            url: '/planos/:idPlan',
            templateUrl: 'views/plans.html',
            controller: 'PlansController',
            controllerAs: "vm"
        });
        RoutesStates.push({
            name: 'register',
            url: '/register',
            templateUrl: 'views/register.html',
            controller: 'RegisterController',
            controllerAs: "vm"
        });
        RoutesStates.forEach(function (state) {
            $stateProvider.state(state);
        });
        $urlRouterProvider.otherwise("/platforms");
        //$locationProvider.html5Mode(true);
    }
    angular
        .module("AppWooza")
        .config(Router);
})(APPWZ || (APPWZ = {}));
/**
 * Classe construtora do componente de planos
 */
var APPWZ;
(function (APPWZ) {
    var objComp = {
        bindings: {
            list: "=",
            use: "@"
        },
        templateUrl: "../components/products.html",
        controller: _controller
    };
    _controller.$inject = ["$state", "PlatformsModel"];
    function _controller($state, PM) {
        var vm = this, model = PM.model();
        /**
         * Ação usada na seleção do plano para popular a model
         * @param item {Objeto} - Plano selecionado
         */
        vm.selectItem = function (item) {
            if (vm.use === "Platform") {
                model.Plataforma = item;
                $state.go("plans", { idPlan: item.sku });
            }
            else {
                model.Plano = item;
                $state.go("register");
            }
        };
        vm.$postLink = function () {
            if (vm.use === "Platform") {
                vm.itemEscolhido = model.Plataforma.sku;
            }
            else {
                vm.itemEscolhido = model.Plano.sku;
            }
        };
    }
    angular.module("AppWooza")
        .component("products", objComp);
})(APPWZ || (APPWZ = {}));
/**
 * Controle da aplicação para a rota Plans
 */
var APPWZ;
(function (APPWZ) {
    PlansController.$inject = ["PlansService", "PlatformsModel", "$state"];
    function PlansController(PlS, PM, $state) {
        var vm = this;
        vm.listPlans = [];
        vm.Model = PM.model();
        init();
        /**
         * Executa inicialmente o controller
         */
        function init() {
            PlS.getPlans(vm.Model.Plataforma.sku).then(function (result) {
                vm.listPlans = result;
            });
            if (!vm.Model.Plataforma) {
                $state.go("platforms");
            }
        }
        ;
    }
    angular
        .module("AppWooza")
        .controller("PlansController", PlansController);
})(APPWZ || (APPWZ = {}));
/**
 * Controle da aplicação para a rota platforms
 */
var APPWZ;
(function (APPWZ) {
    PlatformsController.$inject = ["PlatformsService", "PlatformsModel", "UtilHelpers"];
    function PlatformsController(PS, PM, Util) {
        var vm = this;
        vm.listPlatforms = [];
        vm.listPlan = [];
        vm.Model = PM.model();
        vm.saveForm = saveForm;
        init();
        /**
         * Salva os dados do formulário e on envia para o serviço
         * @param isValid {boolean} - indica se os valores do formulário foram preenchidos
         */
        function saveForm(isValid) {
        }
        /**
         * Executa inicialmente o controller
         */
        function init() {
            PS.getPlatforms().then(function (result) {
                result.map(function (item) {
                    item.icone = Util.getIcon(item.nome);
                });
                vm.listPlatforms = result;
            });
        }
        ;
    }
    angular
        .module("AppWooza")
        .controller("PlatformsController", PlatformsController);
})(APPWZ || (APPWZ = {}));
/**
 * Controle da aplicação para a rota Register
 */
var APPWZ;
(function (APPWZ) {
    RegisterController.$inject = ["RegisterService", "PlatformsModel", "$state", "UtilHelpers", "MsgInfos"];
    function RegisterController(RS, PM, $state, Util, MsgInfos) {
        var vm = this;
        vm.Model = PM.model();
        vm.goBack = goBack;
        vm.maskCPF = maskCPF;
        vm.maskData = maskData;
        vm.maskTel = maskTel;
        vm.sendForm = sendForm;
        init();
        /**
         * Envia os dados do formulário para o serviço
         * @param isValid {boolean} - recebe do formulário se o mesmo está válido
         */
        function sendForm(isValid) {
            if (!isValid) {
                MsgInfos.danger("Preencha os campos com a borda vermelha");
                return;
            }
            if (validateCampos()) {
                RS.Salvar(vm.Model).then(function () {
                    PM.newModel();
                    $state.go("platforms");
                });
            }
        }
        /**
         * Valida se os dados recebidos conferem com o padrão estabelecido
         */
        function validateCampos() {
            var cpfPattern = /\d{3}\.\d{3}\.\d{3}-\d{2}/, dataPattern = /\d{2}\/\d{2}\/\d{4}/, emailPattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/, telPattern = /\(\d{2}\)\s\d{4,5}-\d{4}/, invalid = 0;
            if (!cpfPattern.test(vm.Model.CPF)) {
                MsgInfos.danger("O CPF não está no padrão correto. Ex: 123.456.789-10");
                invalid++;
            }
            if (!dataPattern.test(vm.Model.Nascimento)) {
                MsgInfos.danger("A data de Nascimento não está no padrão correto. Ex: 12/10/1980");
                invalid++;
            }
            if (!emailPattern.test(vm.Model.Email)) {
                MsgInfos.danger("O Email não está no padrão correto. Ex: fulano@beltrano.com");
                invalid++;
            }
            if (!telPattern.test(vm.Model.Telefone)) {
                MsgInfos.danger("O Telefone não está no padrão correto. Ex: (21) 23456-9874");
                invalid++;
            }
            if (invalid > 0) {
                return false;
            }
            return true;
        }
        /**
         * Mascara de CPF
         */
        function maskCPF() {
            vm.Model.CPF = Util.maskCPF(vm.Model.CPF);
        }
        /**
         * Mascara de Telefone
         */
        function maskTel() {
            vm.Model.Telefone = Util.maskTel(vm.Model.Telefone);
        }
        /**
         * Mascara de Data
         */
        function maskData() {
            vm.Model.Nascimento = Util.maskData(vm.Model.Nascimento);
        }
        /**
         * Voltar para a seleção dos planos
         */
        function goBack() {
            $state.go("plans", { idPlan: vm.Model.Plataforma.sku });
        }
        /**
         * Executa inicialmente o controller
         */
        function init() {
            if (!vm.Model.Plataforma) {
                $state.go("platforms");
            }
            if (!vm.Model.Plano) {
                $state.go("plans", { idPlan: vm.Model.Plataforma.sku });
            }
        }
        ;
    }
    angular
        .module("AppWooza")
        .controller("RegisterController", RegisterController);
})(APPWZ || (APPWZ = {}));
/**
 * Recusro para mensagens de notificação sobre os fluxos para o usuário
 */
var APPWZ;
(function (APPWZ) {
    MsgInfos.$inject = [];
    function MsgInfos() {
        var box = $("main");
        return {
            success: _success,
            info: _info,
            warning: _warning,
            danger: _danger
        };
        function _geraEl(tipo, ico, msg) {
            return '<li><p class="alert alert-' + tipo + ' alert-dismissible">' +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>' +
                '<span class="glyphicon glyphicon-' + ico + '"></span> <strong>' + msg + '</strong>' +
                '</p></li>';
        }
        ;
        function _boxMsg() {
            return "<div class='alertSystem'><ul class='list-alert'></ul></div>";
        }
        function _success(msgInput) {
            _disparaAlert(_geraEl("success", "ok-sign", _checkMsg(msgInput)));
        }
        ;
        function _info(msgInput) {
            _disparaAlert(_geraEl("info", "info-sign", _checkMsg(msgInput)));
        }
        ;
        function _warning(msgInput) {
            _disparaAlert(_geraEl("warning", "alert", _checkMsg(msgInput)));
        }
        ;
        function _danger(msgInput) {
            _disparaAlert(_geraEl("danger", "remove-sign", _checkMsg(msgInput)));
        }
        ;
        function _disparaAlert(obj) {
            _removerAfterTime(_addAlert(obj));
        }
        ;
        function _checkMsg(msg) {
            if (typeof msg === "string") {
                if (msg.match(/^\[.*\]$/) !== null) {
                    return _isStringArray(msg);
                }
                else if (msg.match(/^\{.*\}$/) !== null) {
                    return _isStringObjeto(msg);
                }
            }
            else {
                if (angular.isArray(msg)) {
                    return msg.join("<br>");
                }
                else if (angular.isObject(msg)) {
                    return _isStringObjeto(JSON.stringify(msg));
                }
            }
            return msg;
        }
        ;
        function _isStringArray(msg) {
            var arr = JSON.parse(msg);
            return arr.join("<br>");
        }
        ;
        function _isStringObjeto(msg) {
            var arrayString = msg.replace(/^\{(.*)\}$/, "$1").split(',');
            return arrayString.join("<br>");
        }
        ;
        function _hasAlert() {
            return box.find(".alertSystem").is(":visible");
        }
        ;
        function _addAlert(obj) {
            var $tpl = $(obj).attr("id", Date.now()).hide();
            if (!_hasAlert()) {
                box.prepend(_boxMsg());
            }
            return box
                .find(".alertSystem .list-alert")
                .append($tpl)
                .find("li")
                .last()
                .fadeIn();
        }
        ;
        function _removerAfterTime(obj) {
            var id = obj.attr("id");
            var temporizer = setTimeout(function () {
                var alert = box.find(".alertSystem").find("#" + id);
                alert.fadeOut("slow", function () {
                    $(this).remove();
                    clearTimeout(temporizer);
                    removeAlertBox();
                });
            }, 6000);
        }
        ;
        function removeAlertBox() {
            if (!box.find(".alertSystem").find("li").length) {
                box.find(".alertSystem").empty().remove();
            }
        }
    }
    ;
    angular
        .module("AppWooza")
        .factory("MsgInfos", MsgInfos);
})(APPWZ || (APPWZ = {}));
/**
 * Funções que serão reaproveitadas durante a vida do app
 */
var APPWZ;
(function (APPWZ) {
    function UtilHelpers() {
        return {
            searchItemId: searchItemId,
            getIcon: getIcon,
            maskCPF: maskCPF,
            maskTel: maskTel,
            maskData: maskData
        };
        /**
         * Busca em uma lista o item pesquisado pela id.
         * Algoritmo usa divisão da lista para uma busca mais rápida
         * @param lista {Array} - Lista com todos os items
         * @param idItem {any} - id do item a ser buscado
         */
        function searchItemId(lista, idItem) {
            lista.sort(function (a, b) {
                return a.id > b.id;
            });
            var listaTamanho = lista.length, meioLista = Math.round(listaTamanho / 2), posiStart = idItem <= meioLista ? 0 : meioLista;
            for (var i = posiStart; i < idItem; i++) {
                if (lista[i].id === idItem) {
                    return lista[i];
                }
            }
            return null;
        }
        /**
         * Função retorna o icone para o tipo especificado
         * @param idclass classe de complementação para o icone
         */
        function getIcon(idclass) {
            var icon = {
                computador: "laptop",
                tablet: "tablet",
                wifi: "connection"
            };
            return icon[idclass.toLowerCase().replace(/\-/g, '')];
        }
        /**
         * Função para colocar mascara no formato de cpf no valor digitado
         * @param val {string} - texto que receberá o tratamento
         */
        function maskCPF(val) {
            val = val.replace(/\D/g, "");
            val = val.replace(/(\d{3})(\d)/, "$1.$2");
            val = val.replace(/(\d{3})(\d)/, "$1.$2");
            val = val.replace(/(\d{3})(\d{1,2})$/, "$1-$2");
            return val;
        }
        /**
         * Função para colocar mascara no formato de Telefone no valor digitado
         * @param val {string} - texto que receberá o tratamento
         */
        function maskTel(val) {
            val = val.replace(/\D/g, "");
            val = val.replace(/^(\d{2})(\d)/g, "($1) $2");
            val = val.replace(/(\d)(\d{4})$/, "$1-$2");
            return val;
        }
        /**
         * Função para colocar mascara no formato de Data no valor digitado
         * @param val {string} - texto que receberá o tratamento
         */
        function maskData(val) {
            val = val.replace(/\D/g, "");
            val = val.replace(/(\d{2})(\d)/, "$1/$2");
            val = val.replace(/(\d{2})(\d)/, "$1/$2");
            val = val.replace(/(\d{2})(\d{2})$/, "$1$2");
            return val;
        }
    }
    angular
        .module("AppWooza")
        .factory("UtilHelpers", UtilHelpers);
})(APPWZ || (APPWZ = {}));
/**
 * Gera a model para o fluxo da plataforma
 */
var APPWZ;
(function (APPWZ) {
    function PlatformsModel() {
        var Model = {};
        _newModel();
        return {
            model: returnModel,
            newModel: _newModel
        };
        /**
         * Limpa a model e cria nova referencia
         */
        function _newModel() {
            Model = {
                Plataforma: "",
                Plano: "",
                Nome: "",
                Email: "",
                Nascimento: "",
                CPF: "",
                Telefone: ""
            };
        }
        /**
         * Retorna a Model para uso na aplicação
         */
        function returnModel() {
            return Model;
        }
    }
    angular
        .module("AppWooza")
        .factory("PlatformsModel", PlatformsModel);
})(APPWZ || (APPWZ = {}));
/**
 * Serviço para planos que linka o backend com o front end da aplicação
 */
var APPWZ;
(function (APPWZ) {
    PlansService.$inject = ["$http", "$q", "API", "MsgInfos"];
    function PlansService($http, $q, API, MsgInfos) {
        return {
            getPlans: _getPlans
        };
        /**
         * Busca os planos informados pela plataforma selecionada
         * @param plan {string} id da plataforma selecionada
         */
        function _getPlans(plan) {
            var defer = $q.defer();
            $http.get(API + "planos/" + plan)
                .then(function (result) {
                result.data.planos.filter(function (item) { return item.ativo; });
                defer.resolve(result.data.planos);
            })["catch"](function (err) {
                console.error(err);
                MsgInfos.danger("N\u00E3o foi poss\u00EDvel buscar os planos para a plataforma selecionada");
                defer.reject(err);
            });
            return defer.promise;
        }
    }
    angular
        .module("AppWooza")
        .service("PlansService", PlansService);
})(APPWZ || (APPWZ = {}));
/**
 * Serviços que linkando o backend com o front end da aplicação
 */
var APPWZ;
(function (APPWZ) {
    PlatformsService.$inject = ["$http", "$q", "API", "MsgInfos", "UtilHelpers"];
    function PlatformsService($http, $q, API, MsgInfos, Util) {
        return {
            getPlatforms: _getPlatforms
        };
        /**
         * Busca todas as platafomas e as devolve com promise
         */
        function _getPlatforms() {
            var defer = $q.defer();
            $http.get(API + "plataformas")
                .then(function (result) {
                result.data.plataformas.map(function (item) {
                    item.descricao = item.descricao.replace("|", "\n");
                });
                defer.resolve(result.data.plataformas);
            })["catch"](function (err) {
                console.error(err);
                MsgInfos.danger("Não foi possível mostrar as plataformas");
                defer.reject(err);
            });
            return defer.promise;
        }
    }
    angular
        .module("AppWooza")
        .service("PlatformsService", PlatformsService);
})(APPWZ || (APPWZ = {}));
/**
 * Serviço que conclui a aplicação
 */
var APPWZ;
(function (APPWZ) {
    RegisterService.$inject = ["$http", "$q", "API", "MsgInfos"];
    function RegisterService($http, $q, API, MsgInfos) {
        return {
            Salvar: _save
        };
        /**
         * Salva os dados do que foi selecionado e preenchido no fluxo da plataforma
         * @param obj {Object} Model da plataforma
         */
        function _save(obj) {
            var defer = $q.defer();
            console.log(obj);
            setTimeout(function () {
                MsgInfos.success("Os dados foram enviados com sucesso!");
                defer.resolve();
            }, 1000);
            return defer.promise;
        }
    }
    angular
        .module("AppWooza")
        .service("RegisterService", RegisterService);
})(APPWZ || (APPWZ = {}));

//# sourceMappingURL=maps/app.min.js.map
