{"version":3,"sources":["./maps/src/ts/bootstrap/bootstrap.app.ts","./maps/src/ts/bootstrap/router.bootstrap.ts","./maps/src/ts/controller/platforms.controller.ts","./maps/src/ts/helps/mensagens.help.ts","./maps/src/ts/helps/util.helps.ts","./maps/src/ts/model/platforms.model.ts","./maps/src/ts/service/platforms.service.ts"],"names":["APPWZ","appRun","$inject","angular","module","constant","run","Router","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","config","PlatformsController","PS","PM","vm","this","listPlatforms","listPlan","Model","model","saveForm","isValid","selecionaPlataforma","item","Plataforma","console","log","getPlatforms","then","result","MsgInfos","_geraEl","tipo","ico","msg","_boxMsg","_disparaAlert","obj","_removerAfterTime","_addAlert","_checkMsg","match","_isStringArray","_isStringObjeto","isArray","join","isObject","JSON","stringify","parse","replace","split","_hasAlert","box","find","is","$tpl","$","attr","Date","now","hide","prepend","append","last","fadeIn","id","temporizer","setTimeout","fadeOut","remove","clearTimeout","removeAlertBox","length","empty","success","msgInput","info","warning","danger","factory","searchItemId","lista","idItem","sort","a","b","listaTamanho","meioLista","Math","round","i","Plano","Nome","Email","Nascimento","CPF","Telefone","copy","PlatformsService","$http","$q","API","Util","Salvar","defer","get","data","plataformas","map","descricao","resolve","err","error","reject","promise","getPlan","plan","planos","filter","ativo","service"],"mappings":"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","file":"../app.min.js","sourcesContent":["namespace APPWZ {\n    appRun.$inject = [];\n    \n    function appRun() { }\n\n    angular\n        .module('AppWooza', [\"ngRoute\"])\n        .constant(\"API\", \"http://private-59658d-celulardireto2017.apiary-mock.com/\")\n        .run(appRun);\n}","namespace APPWZ {\n\n    Router.$inject = [\"$routeProvider\"];\n    function Router($routeProvider: ng.route.IRouteProvider) {\n        $routeProvider\n            .when(\"/platforms\", {\n                templateUrl: \"views/platforms.html\",\n                controller: \"PlatformsController\",\n                controllerAs: \"vm\"\n            })\n            .otherwise({\n                redirectTo: \"/platforms\"\n            });\n    }\n\n    angular\n        .module(\"AppWooza\")\n        .config(Router);\n}","/**\n * Controle da aplicação para a rota platforms\n */\nnamespace APPWZ {\n    PlatformsController.$inject = [\"PlatformsService\", \"PlatformsModel\"];\n    function PlatformsController(PS:IServicePlatform, PM:IModel) {\n        let vm = this;\n        vm.listPlatforms = [];\n        vm.listPlan = [];\n        vm.Model = PM.model();\n        vm.saveForm = saveForm;\n        vm.selecionaPlataforma = selecionaPlataforma\n\n        init();\n\n        /**\n         * Ação usada na seleção da plataforma para popular a model\n         * @param item {Objeto} - Plataforma selecionada\n         */\n        function selecionaPlataforma(item){\n            vm.Model.Plataforma = item;\n            console.log(vm.Model.Plataforma);\n        }\n        /**\n         * Salva os dados do formulário e on envia para o serviço\n         * @param isValid {boolean} - indica se os valores do formulário foram preenchidos\n         */\n        function saveForm(isValid){\n\n        }\n\n        /**\n         * Busca os planos a partir do plano informado na model\n         */\n        function getPlan(){\n            PS.getPlan(vm.Model.Plataforma.sku)\n                .then((result)=>{\n                    vm.listPlan = result;\n                });\n        }\n\n        /**\n         * Executa inicialmente o controller\n         */\n        function init(){\n            PS.getPlatforms().then((result)=>{\n                vm.listPlatforms = result;\n            });\n        };\n       \n    }\n\n    angular\n        .module(\"AppWooza\")\n        .controller(\"PlatformsController\", PlatformsController);\n}","/**\n * Recusro para mensagens de notificação sobre os fluxos para o usuário\n */\nnamespace APPWZ {\n\n    MsgInfos.$inject = [];\n    function MsgInfos() {\n        var box = $(\"main\");\n\n        return {\n            success: _success,\n            info: _info,\n            warning: _warning,\n            danger: _danger\n        }\n\n        function _geraEl(tipo, ico, msg) {\n            return '<li><p class=\"alert alert-' + tipo + ' alert-dismissible\">' +\n                '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' +\n                '<span class=\"glyphicon glyphicon-' + ico + '\"></span> <strong>' + msg + '</strong>' +\n                '</p></li>';\n        };\n\n        function _boxMsg() {\n            return \"<div class='alertSystem'><ul class='list-alert'></ul></div>\";\n        }\n\n        function _success(msgInput) {\n            _disparaAlert(_geraEl(\"success\", \"ok-sign\", _checkMsg(msgInput)));\n        };\n\n        function _info(msgInput) {\n            _disparaAlert(_geraEl(\"info\", \"info-sign\", _checkMsg(msgInput)));\n        };\n\n        function _warning(msgInput) {\n            _disparaAlert(_geraEl(\"warning\", \"alert\", _checkMsg(msgInput)));\n        };\n\n        function _danger(msgInput) {\n            _disparaAlert(_geraEl(\"danger\", \"remove-sign\", _checkMsg(msgInput)));\n        };\n\n        function _disparaAlert(obj) {\n            _removerAfterTime(_addAlert(obj));\n        };\n\n        function _checkMsg(msg) {\n            if (typeof msg === \"string\") {\n                if (msg.match(/^\\[.*\\]$/) !== null) {\n                    return _isStringArray(msg);\n                } else if (msg.match(/^\\{.*\\}$/) !== null) {\n                    return _isStringObjeto(msg);\n                }\n            } else {\n                if (angular.isArray(msg)) {\n                    return msg.join(\"<br>\");\n                } else if (angular.isObject(msg)) {\n                    return _isStringObjeto(JSON.stringify(msg));\n                }\n            }\n            return msg;\n        };\n\n        function _isStringArray(msg) {\n            var arr = JSON.parse(msg);\n            return arr.join(\"<br>\");\n        };\n\n        function _isStringObjeto(msg) {\n            var arrayString = msg.replace(/^\\{(.*)\\}$/, \"$1\").split(',');\n            return arrayString.join(\"<br>\");\n        };\n\n        function _hasAlert() {\n            return box.find(\".alertSystem\").is(\":visible\");\n        };\n\n        function _addAlert(obj) {\n            var $tpl = $(obj).attr(\"id\", Date.now()).hide();\n            if (!_hasAlert()) {\n                box.prepend(_boxMsg());\n            }\n\n            return box\n                .find(\".alertSystem .list-alert\")\n                .append($tpl)\n                .find(\"li\")\n                .last()\n                .fadeIn();\n        };\n\n        function _removerAfterTime(obj) {\n            var id = obj.attr(\"id\");\n            var temporizer = setTimeout(function () {\n                var alert = box.find(\".alertSystem\").find(\"#\" + id);\n                alert.fadeOut(\"slow\", function () {\n                    $(this).remove();\n                    clearTimeout(temporizer);\n                    removeAlertBox();\n                });\n            }, 6000)\n        };\n\n        function removeAlertBox() {\n            if (!box.find(\".alertSystem\").find(\"li\").length) {\n                box.find(\".alertSystem\").empty().remove();\n            }\n        }\n\n\n    };\n\n    angular\n        .module(\"AppWooza\")\n        .factory(\"MsgInfos\", MsgInfos);\n}","/**\n * Funções que serão rearoveitadas durante a vida do app\n */\nnamespace APPWZ {\n    function UtilHelpers() {\n\n        return {\n            searchItemId: searchItemId\n        };\n\n        function searchItemId(lista: Array<any>, idItem: number) {\n            lista.sort((a, b) => {\n                return a.id > b.id;\n            });\n\n            let listaTamanho = lista.length,\n                meioLista = Math.round(listaTamanho / 2),\n                posiStart = idItem <= meioLista ? 0 : meioLista;\n\n            for (let i = posiStart; i < idItem; i++) {\n                if (lista[i].id === idItem) {\n                    return lista[i];\n                }\n            }\n            return null;\n        }\n\n           \n    }\n\n    angular\n        .module(\"AppWooza\")\n        .factory(\"UtilHelpers\", UtilHelpers);\n}","/**\n * Gera a model para o fluxo da plataforma\n */\nnamespace APPWZ {\n    function PlatformsModel() {\n        let Model = {\n            Plataforma: \"\",\n            Plano: \"\",\n            Nome: \"\",\n            Email: \"\",\n            Nascimento: \"\",\n            CPF: \"\",\n            Telefone: \"\"\n        };\n\n        /**\n         * Retorma a copiado model gerando uma nova instancia para esse objeto\n         */\n        function getModel() {\n            return angular.copy(Model);\n        }\n\n        return {\n            model: getModel\n        };\n    }\n\n    angular\n        .module(\"AppWooza\")\n        .factory(\"PlatformsModel\", PlatformsModel);\n}","/**\n * Serviços que linkando o backend com o front end da aplicação\n */\nnamespace APPWZ {\n    PlatformsService.$inject = [\"$http\", \"$q\", \"API\", \"MsgInfos\", \"UtilHelpers\"];\n    function PlatformsService($http, $q, API, MsgInfos:IMgs, Util) {\n        return {\n            Salvar: _save,\n            getPlatforms: _getPlatforms,\n            getPlan: _getPlan\n        }\n \n        /**\n         * Salva os dados do que foi selecionado e preenchido no fluxo da plataforma\n         * @param obj {Object} Model da plataforma\n         */\n        function _save(obj) {\n            console.log(obj);\n            MsgInfos.success(\"Os dados foram enviados com sucesso!\");\n        }\n\n        /**\n         * Busca todas as platafomas e as devolve com promise\n         */\n        function _getPlatforms(){\n            let defer = $q.defer();\n            $http.get(`${API}plataformas`)\n                .then( (result) => {\n                    result.data.plataformas.map((item:IPlatform)=>{\n                        item.descricao = item.descricao.replace(\"|\", \"\\n\");\n                    });\n                    defer.resolve(<Array<IPlatform>>result.data.plataformas); \n                })\n                .catch( (err) => {\n                    console.error(err);\n                    MsgInfos.danger(\"Não foi possível mostrar as plataformas\");\n                    defer.reject(err);\n                });\n\n            return defer.promise;\n        }\n\n        /**\n         * Busca os planos informados pela plataforma selecionada\n         * @param plan {string} id da plataforma selecionada\n         */\n        function _getPlan(plan:string){\n            let defer = $q.defer();\n            $http.get(`${API}planos/${plan}`)\n                .then( (result) => {\n                    result.data.planos.filter( (item) => item.ativo );\n                    defer.resolve(<Array<IPlanoWifi|IPlanoAparelho>>result.data.planos); \n                })\n                .catch( (err) => {\n                    console.error(err);\n                    MsgInfos.danger(`Não foi possível buscar os planos para a plataforma selecionada`);\n                    defer.reject(err);\n                });\n\n            return defer.promise;\n        }\n \n    }\n\n    angular\n        .module(\"AppWooza\")\n        .service(\"PlatformsService\", PlatformsService);\n}"]}