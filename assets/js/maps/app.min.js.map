{"version":3,"sources":["./maps/src/ts/bootstrap/bootstrap.app.ts","./maps/src/ts/bootstrap/router.bootstrap.ts","./maps/src/ts/components/products.component.ts","./maps/src/ts/controller/plans.controller.ts","./maps/src/ts/controller/platforms.controller.ts","./maps/src/ts/controller/register.controller.ts","./maps/src/ts/helps/mensagens.help.ts","./maps/src/ts/helps/util.helps.ts","./maps/src/ts/model/platforms.model.ts","./maps/src/ts/service/plan.service.ts","./maps/src/ts/service/platforms.service.ts","./maps/src/ts/service/register.service.ts"],"names":["APPWZ","appRun","$inject","angular","module","constant","run","Router","$stateProvider","$urlRouterProvider","$locationProvider","RoutesStates","push","name","url","templateUrl","controller","controllerAs","forEach","state","otherwise","config","_controller","$state","PM","vm","this","model","selectItem","item","use","Plataforma","go","idPlan","sku","Plano","$postLink","itemEscolhido","objComp","bindings","list","component","PlansController","PlS","listPlans","Model","getPlans","then","result","PlatformsController","PS","Util","listPlatforms","listPlan","saveForm","isValid","getPlatforms","map","icone","getIcon","nome","RegisterController","RS","MsgInfos","validateCampos","dataPattern","emailPattern","telPattern","invalid","test","CPF","danger","validate","Nascimento","moment","Email","Telefone","goBack","maskCPF","maskData","maskTel","sendForm","Salvar","newModel","_geraEl","tipo","ico","msg","_boxMsg","_disparaAlert","obj","_removerAfterTime","_addAlert","_checkMsg","match","_isStringArray","_isStringObjeto","isArray","join","isObject","JSON","stringify","parse","replace","split","_hasAlert","box","find","is","$tpl","$","attr","Date","now","hide","prepend","append","last","fadeIn","id","temporizer","setTimeout","fadeOut","remove","clearTimeout","removeAlertBox","length","empty","success","msgInput","info","warning","factory","searchItemId","lista","idItem","sort","a","b","listaTamanho","meioLista","Math","round","i","idclass","computador","tablet","wifi","toLowerCase","val","_newModel","Nome","PlansService","$http","$q","API","plan","defer","get","data","planos","filter","ativo","resolve","err","console","error","reject","promise","service","PlatformsService","plataformas","descricao","RegisterService","log"],"mappings":"AAAA,IAAUA,OAAV,SAAUA,GAGN,SAAAC,KAFAA,EAAOC,WAIPC,QACKC,OAAO,YAAa,cACpBC,SAAS,MAAO,4DAChBC,IAAIL,GARb,CAAUD,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAGN,SAAAO,EAAgBC,EAAgBC,EAAoBC,GAChD,IAAIC,KAEJA,EAAaC,MACTC,KAAM,YACNC,IAAK,aACLC,YAAa,uBACbC,WAAY,sBACZC,aAAc,OAGlBN,EAAaC,MACTC,KAAM,QACNC,IAAK,kBACLC,YAAa,mBACbC,WAAY,kBACZC,aAAc,OAGlBN,EAAaC,MACTC,KAAM,WACNC,IAAK,YACLC,YAAa,sBACbC,WAAY,qBACZC,aAAc,OAGlBN,EAAaO,QAAS,SAACC,GACnBX,EAAeW,MAAMA,KAGzBV,EAAmBW,UAAU,cAhCjCb,EAAOL,SAAW,iBAAkB,qBAAsB,qBAoC1DC,QACKC,OAAO,YACPiB,OAAOd,GAxChB,CAAUP,QAAAA,WCGV,IAAUA,OAAV,SAAUA,GAYN,SAAAsB,EAAqBC,EAAQC,GACzB,IAAIC,EAAKC,KACLC,EAAQH,EAAGG,QAMfF,EAAGG,WAAa,SAASC,GACP,aAAXJ,EAAGK,KACFH,EAAMI,WAAaF,EACnBN,EAAOS,GAAG,SAAUC,OAAQJ,EAAKK,QAEjCP,EAAMQ,MAAQN,EACdN,EAAOS,GAAG,cAKlBP,EAAGW,UAAY,WACG,aAAXX,EAAGK,IACFL,EAAGY,cAAgBV,EAAMI,WAAWG,IAEpCT,EAAGY,cAAgBV,EAAMQ,MAAMD,KAjC3C,IAAII,GACAC,UACIC,KAAM,IACNV,IAAK,KAETf,YAAa,2BACbC,WAAYM,GAGhBA,EAAYpB,SAAW,SAAU,kBA+BjCC,QAAQC,OAAO,YACNqC,UAAU,WAAYH,GA3CnC,CAAUtC,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA0C,EAAyBC,EAAKnB,EAAWD,GACrC,IAAIE,EAAKC,KACTD,EAAGmB,aACHnB,EAAGoB,MAAQrB,EAAGG,QASVgB,EAAIG,SAASrB,EAAGoB,MAAMd,WAAWG,KAAKa,KAAK,SAACC,GACxCvB,EAAGmB,UAAYI,IAGfvB,EAAGoB,MAAMd,YACTR,EAAOS,GAAG,aAlBtBU,EAAgBxC,SAAW,eAAgB,iBAAkB,UAwB7DC,QACKC,OAAO,YACPY,WAAW,kBAAmB0B,GA3BvC,CAAU1C,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAAiD,EAA6BC,EAAqB1B,EAAW2B,GACzD,IAAI1B,EAAKC,KACTD,EAAG2B,iBACH3B,EAAG4B,YACH5B,EAAGoB,MAAQrB,EAAGG,QACdF,EAAG6B,SAQH,SAAkBC,KAQdL,EAAGM,eAAeT,KAAK,SAACC,GACpBA,EAAOS,IAAI,SAAC5B,GACRA,EAAK6B,MAAQP,EAAKQ,QAAQ9B,EAAK+B,QAEnCnC,EAAG2B,cAAgBJ,IA1B/BC,EAAoB/C,SAAW,mBAAoB,iBAAkB,eAgCrEC,QACKC,OAAO,YACPY,WAAW,sBAAuBiC,GAnC3C,CAAUjD,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA6D,EAA4BC,EAAItC,EAAWD,EAAQ4B,EAAMY,GAiCrD,SAAAC,IACI,IACIC,EAAc,sBACdC,EAAe,yJACfC,EAAa,2BACbC,EAAU,EAgCd,MApCiB,4BAMFC,KAAK5C,EAAGoB,MAAMyB,OACzBP,EAASQ,OAAO,wDAChBH,KAGAE,IAAIE,SAAS/C,EAAGoB,MAAMyB,OACtBP,EAASQ,OAAO,wBAChBH,KAGAH,EAAYI,KAAK5C,EAAGoB,MAAM4B,cAC1BV,EAASQ,OAAO,mEAChBH,KAGAM,OAAOjD,EAAGoB,MAAM4B,WAAY,cAAclB,YAC1CQ,EAASQ,OAAO,uCAChBH,KAGAF,EAAaG,KAAK5C,EAAGoB,MAAM8B,SAC3BZ,EAASQ,OAAO,+DAChBH,KAGAD,EAAWE,KAAK5C,EAAGoB,MAAM+B,YACzBb,EAASQ,OAAO,8DAChBH,OAGDA,EAAU,GArEjB,IAAI3C,EAAKC,KACTD,EAAGoB,MAAQrB,EAAGG,QACdF,EAAGoD,OAkGH,WACItD,EAAOS,GAAG,SAAUC,OAAQR,EAAGoB,MAAMd,WAAWG,OAlGpDT,EAAGqD,QA4EH,WACIrD,EAAGoB,MAAMyB,IAAMnB,EAAK2B,QAAQrD,EAAGoB,MAAMyB,MA5EzC7C,EAAGsD,SAyFH,WACItD,EAAGoB,MAAM4B,WAAatB,EAAK4B,SAAStD,EAAGoB,MAAM4B,aAzFjDhD,EAAGuD,QAiFH,WACIvD,EAAGoB,MAAM+B,SAAWzB,EAAK6B,QAAQvD,EAAGoB,MAAM+B,WAjF9CnD,EAAGwD,SASH,SAAkB1B,GACVA,EAKDS,KACCF,EAAGoB,OAAOzD,EAAGoB,OAAOE,KAAK,WACrBvB,EAAG2D,WACH5D,EAAOS,GAAG,eAPd+B,EAASQ,OAAO,4CA4FhB9C,EAAGoB,MAAMd,YACTR,EAAOS,GAAG,aAGVP,EAAGoB,MAAMV,OACTZ,EAAOS,GAAG,SAAUC,OAAQR,EAAGoB,MAAMd,WAAWG,MApH5D2B,EAAmB3D,SAAW,kBAAmB,iBAAkB,SAAU,cAAe,YA0H5FC,QACKC,OAAO,YACPY,WAAW,qBAAsB6C,GA7H1C,CAAU7D,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAGN,SAAA+D,IAUI,SAAAqB,EAAiBC,EAAMC,EAAKC,GACxB,MAAO,6BAA+BF,EAAO,oLAEHC,EAAM,qBAAuBC,EAAM,qBAIjF,SAAAC,IACI,MAAO,8DAmBX,SAAAC,EAAuBC,GACnBC,EAAkBC,EAAUF,IAGhC,SAAAG,EAAmBN,GACf,GAAmB,iBAARA,EAAkB,CACzB,GAA8B,OAA1BA,EAAIO,MAAM,YACV,OAAOC,EAAeR,GACnB,GAA8B,OAA1BA,EAAIO,MAAM,YACjB,OAAOE,EAAgBT,OAExB,CACH,GAAIpF,QAAQ8F,QAAQV,GAChB,OAAOA,EAAIW,KAAK,QACb,GAAI/F,QAAQgG,SAASZ,GACxB,OAAOS,EAAgBI,KAAKC,UAAUd,IAG9C,OAAOA,EAGX,SAAAQ,EAAwBR,GAEpB,OADUa,KAAKE,MAAMf,GACVW,KAAK,QAGpB,SAAAF,EAAyBT,GAErB,OADkBA,EAAIgB,QAAQ,aAAc,MAAMC,MAAM,KACrCN,KAAK,QAG5B,SAAAO,IACI,OAAOC,EAAIC,KAAK,gBAAgBC,GAAG,YAGvC,SAAAhB,EAAmBF,GACf,IAAImB,EAAOC,EAAEpB,GAAKqB,KAAK,KAAMC,KAAKC,OAAOC,OAKzC,OAJKT,KACDC,EAAIS,QAAQ3B,KAGTkB,EACFC,KAAK,4BACLS,OAAOP,GACPF,KAAK,MACLU,OACAC,SAGT,SAAA3B,EAA2BD,GACvB,IAAI6B,EAAK7B,EAAIqB,KAAK,MACdS,EAAaC,WAAW,WACZf,EAAIC,KAAK,gBAAgBA,KAAK,IAAMY,GAC1CG,QAAQ,OAAQ,WAClBZ,EAAEpF,MAAMiG,SACRC,aAAaJ,GACbK,OAEL,KAGP,SAAAA,IACSnB,EAAIC,KAAK,gBAAgBA,KAAK,MAAMmB,QACrCpB,EAAIC,KAAK,gBAAgBoB,QAAQJ,SAnGzC,IAAIjB,EAAMI,EAAE,QAEZ,OACIkB,QAiBJ,SAAkBC,GACdxC,EAAcL,EAAQ,UAAW,UAAWS,EAAUoC,MAjBtDC,KAoBJ,SAAeD,GACXxC,EAAcL,EAAQ,OAAQ,YAAaS,EAAUoC,MApBrDE,QAuBJ,SAAkBF,GACdxC,EAAcL,EAAQ,UAAW,QAASS,EAAUoC,MAvBpD1D,OA0BJ,SAAiB0D,GACbxC,EAAcL,EAAQ,SAAU,cAAeS,EAAUoC,OAnCjElE,EAAS7D,WA4GTC,QACKC,OAAO,YACPgI,QAAQ,WAAYrE,GAhH7B,CAAU/D,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAsFNG,QACKC,OAAO,YACPgI,QAAQ,cAvFb,WAEI,OACIC,aAaJ,SAAsBC,EAAmBC,GACrCD,EAAME,KAAK,SAACC,EAAGC,GACX,OAAOD,EAAElB,GAAKmB,EAAEnB,KAOpB,IAAK,IAJDoB,EAAeL,EAAMR,OACrBc,EAAYC,KAAKC,MAAMH,EAAe,GAGjCI,EAFOR,GAAUK,EAAY,EAAIA,EAElBG,EAAIR,EAAQQ,IAChC,GAAIT,EAAMS,GAAGxB,KAAOgB,EAChB,OAAOD,EAAMS,GAGrB,OAAO,MA1BPpF,QAiCJ,SAAiBqF,GAMb,OAJIC,WAAY,SACZC,OAAQ,SACRC,KAAM,cAEEH,EAAQI,cAAc7C,QAAQ,MAAO,MAtCjDzB,QA8CJ,SAAiBuE,GAKb,OAJAA,EAAMA,EAAI9C,QAAQ,MAAM,IACxB8C,EAAMA,EAAI9C,QAAQ,cAAc,SAChC8C,EAAMA,EAAI9C,QAAQ,cAAc,SAChC8C,EAAMA,EAAI9C,QAAQ,oBAAoB,UAjDtCvB,QAyDJ,SAAiBqE,GAIb,OAHAA,EAAMA,EAAI9C,QAAQ,MAAM,IACxB8C,EAAMA,EAAI9C,QAAQ,gBAAgB,WAClC8C,EAAMA,EAAI9C,QAAQ,eAAe,UA3DjCxB,SAmEJ,SAAkBsE,GAKd,OAJAA,EAAMA,EAAI9C,QAAQ,MAAM,IACxB8C,EAAMA,EAAI9C,QAAQ,cAAc,SAChC8C,EAAMA,EAAI9C,QAAQ,cAAc,SAChC8C,EAAMA,EAAI9C,QAAQ,kBAAkB,YA/EhD,CAAUvG,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAkCNG,QACKC,OAAO,YACPgI,QAAQ,iBAnCb,WAaI,SAAAkB,IACIzG,GACId,WAAY,GACZI,MAAO,GACPoH,KAAM,GACN5E,MAAO,GACPF,WAAY,GACZH,IAAK,GACLM,SAAU,IApBlB,IAAI/B,KAIJ,OAFAyG,KAGI3H,MAsBJ,WACI,OAAOkB,GAtBPsC,SAAUmE,KARtB,CAAUtJ,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAAwJ,EAAsBC,EAAOC,EAAIC,EAAK5F,GAClC,OACIjB,SAOJ,SAAmB8G,GACf,IAAIC,EAAQH,EAAGG,QAYf,OAXAJ,EAAMK,IAAOH,EAAG,UAAUC,GACrB7G,KAAM,SAACC,GACJA,EAAO+G,KAAKC,OAAOC,OAAQ,SAACpI,GAAS,OAAAA,EAAKqI,QAC1CL,EAAMM,QAA0CnH,EAAO+G,KAAKC,UAE1D,MAAE,SAACI,GACLC,QAAQC,MAAMF,GACdrG,EAASQ,OAAO,mEAChBsF,EAAMU,OAAOH,KAGdP,EAAMW,UAvBrBhB,EAAatJ,SAAW,QAAS,KAAM,MAAO,YA4B9CC,QACKC,OAAO,YACPqK,QAAQ,eAAgBjB,GA/BjC,CAAUxJ,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA0K,EAA0BjB,EAAOC,EAAIC,EAAK5F,EAAeZ,GACrD,OACIK,aAMJ,WACI,IAAIqG,EAAQH,EAAGG,QAcf,OAbAJ,EAAMK,IAAOH,EAAG,eACX5G,KAAM,SAACC,GACJA,EAAO+G,KAAKY,YAAYlH,IAAI,SAAC5B,GACzBA,EAAK+I,UAAY/I,EAAK+I,UAAUrE,QAAQ,IAAK,QAEjDsD,EAAMM,QAA0BnH,EAAO+G,KAAKY,eAE1C,MAAE,SAACP,GACLC,QAAQC,MAAMF,GACdrG,EAASQ,OAAO,2CAChBsF,EAAMU,OAAOH,KAGdP,EAAMW,UAxBrBE,EAAiBxK,SAAW,QAAS,KAAM,MAAO,WAAY,eA6B9DC,QACKC,OAAO,YACPqK,QAAQ,mBAAoBC,GAhCrC,CAAU1K,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA6K,EAAyBpB,EAAOC,EAAIC,EAAK5F,GACrC,OACImB,OAOJ,SAAeQ,GACX,IAAImE,EAAQH,EAAGG,QAOf,OALAQ,QAAQS,IAAIpF,GACZ+B,WAAW,WACP1D,EAASiE,QAAQ,wCACjB6B,EAAMM,WACP,KACIN,EAAMW,UAlBrBK,EAAgB3K,SAAW,QAAS,KAAM,MAAO,YAuBjDC,QACKC,OAAO,YACPqK,QAAQ,kBAAmBI,GA1BpC,CAAU7K,QAAAA","file":"../app.min.js","sourcesContent":["namespace APPWZ {\r\n    appRun.$inject = [];\r\n    \r\n    function appRun() { }\r\n\r\n    angular\r\n        .module('AppWooza', [\"ui.router\"])\r\n        .constant(\"API\", \"http://private-59658d-celulardireto2017.apiary-mock.com/\")\r\n        .run(appRun);\r\n}  ","namespace APPWZ {\r\n\r\n    Router.$inject = [\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\"];\r\n    function Router($stateProvider, $urlRouterProvider, $locationProvider) {\r\n        let RoutesStates = [];\r\n\r\n        RoutesStates.push({\r\n            name: 'platforms',\r\n            url: '/platforms',\r\n            templateUrl: 'views/platforms.html',\r\n            controller: 'PlatformsController',\r\n            controllerAs: \"vm\"\r\n        });\r\n\r\n        RoutesStates.push({\r\n            name: 'plans',\r\n            url: '/planos/:idPlan',\r\n            templateUrl: 'views/plans.html',\r\n            controller: 'PlansController',\r\n            controllerAs: \"vm\"\r\n        });\r\n\r\n        RoutesStates.push({\r\n            name: 'register',\r\n            url: '/register',\r\n            templateUrl: 'views/register.html',\r\n            controller: 'RegisterController',\r\n            controllerAs: \"vm\"\r\n        });\r\n\r\n        RoutesStates.forEach( (state) => {\r\n            $stateProvider.state(state);\r\n        })\r\n\r\n        $urlRouterProvider.otherwise(\"/platforms\");\r\n        //$locationProvider.html5Mode(true);\r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .config(Router);\r\n}","/**\r\n * Classe construtora do componente de planos\r\n */\r\nnamespace APPWZ{\r\n    \r\n    var objComp = {\r\n        bindings: {\r\n            list: \"=\",\r\n            use: \"@\"\r\n        },\r\n        templateUrl: \"components/products.html\",\r\n        controller: _controller\r\n    };\r\n\r\n    _controller.$inject = [\"$state\", \"PlatformsModel\"];\r\n    function _controller($state, PM){\r\n        var vm = this,\r\n            model = PM.model();\r\n\r\n        /**\r\n         * Ação usada na seleção do plano para popular a model\r\n         * @param item {Objeto} - Plano selecionado\r\n         */\r\n        vm.selectItem = function(item){\r\n            if(vm.use === \"Platform\"){\r\n                model.Plataforma = item;\r\n                $state.go(\"plans\", {idPlan: item.sku});\r\n            }else{\r\n                model.Plano = item;\r\n                $state.go(\"register\");\r\n            }\r\n            \r\n        }\r\n\r\n        vm.$postLink = function(){\r\n            if(vm.use === \"Platform\"){\r\n                vm.itemEscolhido = model.Plataforma.sku;\r\n            }else{\r\n                vm.itemEscolhido = model.Plano.sku;                \r\n            }\r\n        }\r\n\r\n\r\n    }   \r\n\r\n    angular.module(\"AppWooza\")  \r\n            .component(\"products\", objComp);\r\n}","/**\r\n * Controle da aplicação para a rota Plans\r\n */\r\nnamespace APPWZ {\r\n    PlansController.$inject = [\"PlansService\", \"PlatformsModel\", \"$state\"];\r\n    function PlansController(PlS, PM:IModel, $state) {\r\n        let vm = this;\r\n        vm.listPlans = [];\r\n        vm.Model = PM.model();\r\n\r\n \r\n        init();\r\n\r\n        /**\r\n         * Executa inicialmente o controller\r\n         */\r\n        function init(){\r\n            PlS.getPlans(vm.Model.Plataforma.sku).then((result)=>{\r\n                vm.listPlans = result;\r\n            });\r\n\r\n            if(!vm.Model.Plataforma){\r\n                $state.go(\"platforms\")\r\n            }\r\n        };\r\n       \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .controller(\"PlansController\", PlansController);\r\n}","/**\r\n * Controle da aplicação para a rota platforms\r\n */\r\nnamespace APPWZ {\r\n    PlatformsController.$inject = [\"PlatformsService\", \"PlatformsModel\", \"UtilHelpers\"];\r\n    function PlatformsController(PS:IServicePlatform, PM:IModel, Util) {\r\n        let vm = this;\r\n        vm.listPlatforms = []; \r\n        vm.listPlan = [];\r\n        vm.Model = PM.model();\r\n        vm.saveForm = saveForm;\r\n \r\n        init();\r\n\r\n        /**\r\n         * Salva os dados do formulário e on envia para o serviço\r\n         * @param isValid {boolean} - indica se os valores do formulário foram preenchidos\r\n         */\r\n        function saveForm(isValid){\r\n\r\n        }\r\n\r\n        /**\r\n         * Executa inicialmente o controller\r\n         */\r\n        function init(){\r\n            PS.getPlatforms().then((result)=>{\r\n                result.map((item)=>{\r\n                    item.icone = Util.getIcon(item.nome);\r\n                });\r\n                vm.listPlatforms = result;\r\n            });\r\n        };\r\n       \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .controller(\"PlatformsController\", PlatformsController);\r\n}","/**\r\n * Controle da aplicação para a rota Register\r\n */\r\nnamespace APPWZ {\r\n    RegisterController.$inject = [\"RegisterService\", \"PlatformsModel\", \"$state\", \"UtilHelpers\", \"MsgInfos\"];\r\n    function RegisterController(RS, PM:IModel, $state, Util, MsgInfos) {\r\n        let vm = this;\r\n        vm.Model = PM.model();\r\n        vm.goBack = goBack;\r\n        vm.maskCPF = maskCPF;\r\n        vm.maskData = maskData;\r\n        vm.maskTel = maskTel;\r\n        vm.sendForm = sendForm;\r\n\r\n \r\n        init();\r\n\r\n        /**\r\n         * Envia os dados do formulário para o serviço\r\n         * @param isValid {boolean} - recebe do formulário se o mesmo está válido\r\n         */\r\n        function sendForm(isValid){\r\n            if(!isValid){\r\n                MsgInfos.danger(\"Preencha os campos com a borda vermelha\");\r\n                return;\r\n            }\r\n\r\n            if(validateCampos()){\r\n                RS.Salvar(vm.Model).then(()=>{\r\n                    PM.newModel();\r\n                    $state.go(\"platforms\")\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Valida se os dados recebidos conferem com o padrão estabelecido\r\n         */\r\n        function validateCampos(){\r\n            let cpfPattern = /\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}/,\r\n                dataPattern = /\\d{2}\\/\\d{2}\\/\\d{4}/,\r\n                emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                telPattern = /\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}/,\r\n                invalid = 0;\r\n            \r\n            if(!cpfPattern.test(vm.Model.CPF)){\r\n                MsgInfos.danger(\"O CPF não está no padrão correto. Ex: 123.456.789-10\");\r\n                invalid++;\r\n            }\r\n\r\n            if(!CPF.validate(vm.Model.CPF)){\r\n                MsgInfos.danger(\"Este CPF é inválido.\");\r\n                invalid++;\r\n            }\r\n\r\n            if(!dataPattern.test(vm.Model.Nascimento)){\r\n                MsgInfos.danger(\"A data de Nascimento não está no padrão correto. Ex: 12/10/1980\");\r\n                invalid++;                \r\n            }\r\n\r\n            if(!moment(vm.Model.Nascimento, \"DD/MM/YYYY\").isValid()){\r\n                MsgInfos.danger(\"Esta data de nascimento é inválida.\");\r\n                invalid++;\r\n            } \r\n\r\n            if(!emailPattern.test(vm.Model.Email)){\r\n                MsgInfos.danger(\"O Email não está no padrão correto. Ex: fulano@beltrano.com\");\r\n                invalid++;                \r\n            }\r\n\r\n            if(!telPattern.test(vm.Model.Telefone)){\r\n                MsgInfos.danger(\"O Telefone não está no padrão correto. Ex: (21) 23456-9874\");\r\n                invalid++;                \r\n            }\r\n\r\n            if(invalid > 0){\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Mascara de CPF\r\n         */\r\n        function maskCPF(){\r\n            vm.Model.CPF = Util.maskCPF(vm.Model.CPF);\r\n        }\r\n\r\n        /**\r\n         * Mascara de Telefone\r\n         */\r\n        function maskTel(){\r\n            vm.Model.Telefone = Util.maskTel(vm.Model.Telefone);\r\n        }\r\n\r\n        /**\r\n         * Mascara de Data\r\n         */\r\n        function maskData(){\r\n            vm.Model.Nascimento = Util.maskData(vm.Model.Nascimento);\r\n        }\r\n\r\n        /**\r\n         * Voltar para a seleção dos planos\r\n         */\r\n        function goBack(){\r\n            $state.go(\"plans\", {idPlan: vm.Model.Plataforma.sku});\r\n        }\r\n\r\n        /**\r\n         * Executa inicialmente o controller\r\n         */\r\n        function init(){\r\n\r\n            if(!vm.Model.Plataforma){\r\n                $state.go(\"platforms\");\r\n            }\r\n\r\n            if(!vm.Model.Plano){\r\n                $state.go(\"plans\", {idPlan: vm.Model.Plataforma.sku});\r\n            }\r\n        };\r\n       \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .controller(\"RegisterController\", RegisterController);\r\n}","/**\r\n * Recusro para mensagens de notificação sobre os fluxos para o usuário\r\n */\r\nnamespace APPWZ {\r\n\r\n    MsgInfos.$inject = [];\r\n    function MsgInfos() {\r\n        var box = $(\"main\");\r\n\r\n        return {\r\n            success: _success,\r\n            info: _info,\r\n            warning: _warning,\r\n            danger: _danger\r\n        }\r\n\r\n        function _geraEl(tipo, ico, msg) {\r\n            return '<li><p class=\"alert alert-' + tipo + ' alert-dismissible\">' +\r\n                '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' +\r\n                '<span class=\"glyphicon glyphicon-' + ico + '\"></span> <strong>' + msg + '</strong>' +\r\n                '</p></li>';\r\n        };\r\n\r\n        function _boxMsg() {\r\n            return \"<div class='alertSystem'><ul class='list-alert'></ul></div>\";\r\n        }\r\n\r\n        function _success(msgInput) {\r\n            _disparaAlert(_geraEl(\"success\", \"ok-sign\", _checkMsg(msgInput)));\r\n        };\r\n\r\n        function _info(msgInput) {\r\n            _disparaAlert(_geraEl(\"info\", \"info-sign\", _checkMsg(msgInput)));\r\n        };\r\n\r\n        function _warning(msgInput) {\r\n            _disparaAlert(_geraEl(\"warning\", \"alert\", _checkMsg(msgInput)));\r\n        };\r\n\r\n        function _danger(msgInput) {\r\n            _disparaAlert(_geraEl(\"danger\", \"remove-sign\", _checkMsg(msgInput)));\r\n        };\r\n\r\n        function _disparaAlert(obj) {\r\n            _removerAfterTime(_addAlert(obj));\r\n        };\r\n\r\n        function _checkMsg(msg) {\r\n            if (typeof msg === \"string\") {\r\n                if (msg.match(/^\\[.*\\]$/) !== null) {\r\n                    return _isStringArray(msg);\r\n                } else if (msg.match(/^\\{.*\\}$/) !== null) {\r\n                    return _isStringObjeto(msg);\r\n                }\r\n            } else {\r\n                if (angular.isArray(msg)) {\r\n                    return msg.join(\"<br>\");\r\n                } else if (angular.isObject(msg)) {\r\n                    return _isStringObjeto(JSON.stringify(msg));\r\n                }\r\n            }\r\n            return msg;\r\n        };\r\n\r\n        function _isStringArray(msg) {\r\n            var arr = JSON.parse(msg);\r\n            return arr.join(\"<br>\");\r\n        };\r\n\r\n        function _isStringObjeto(msg) {\r\n            var arrayString = msg.replace(/^\\{(.*)\\}$/, \"$1\").split(',');\r\n            return arrayString.join(\"<br>\");\r\n        };\r\n\r\n        function _hasAlert() {\r\n            return box.find(\".alertSystem\").is(\":visible\");\r\n        };\r\n\r\n        function _addAlert(obj) {\r\n            var $tpl = $(obj).attr(\"id\", Date.now()).hide();\r\n            if (!_hasAlert()) {\r\n                box.prepend(_boxMsg());\r\n            }\r\n\r\n            return box\r\n                .find(\".alertSystem .list-alert\")\r\n                .append($tpl)\r\n                .find(\"li\")\r\n                .last()\r\n                .fadeIn();\r\n        };\r\n\r\n        function _removerAfterTime(obj) {\r\n            var id = obj.attr(\"id\");\r\n            var temporizer = setTimeout(function () {\r\n                var alert = box.find(\".alertSystem\").find(\"#\" + id);\r\n                alert.fadeOut(\"slow\", function () {\r\n                    $(this).remove();\r\n                    clearTimeout(temporizer);\r\n                    removeAlertBox();\r\n                });\r\n            }, 6000)\r\n        };\r\n\r\n        function removeAlertBox() {\r\n            if (!box.find(\".alertSystem\").find(\"li\").length) {\r\n                box.find(\".alertSystem\").empty().remove();\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .factory(\"MsgInfos\", MsgInfos);\r\n}","/**\r\n * Funções que serão reaproveitadas durante a vida do app\r\n */\r\nnamespace APPWZ {\r\n    function UtilHelpers() {\r\n\r\n        return {\r\n            searchItemId: searchItemId,\r\n            getIcon: getIcon,\r\n            maskCPF: maskCPF,\r\n            maskTel: maskTel,\r\n            maskData: maskData\r\n        };\r\n\r\n        /**\r\n         * Busca em uma lista o item pesquisado pela id. \r\n         * Algoritmo usa divisão da lista para uma busca mais rápida\r\n         * @param lista {Array} - Lista com todos os items\r\n         * @param idItem {any} - id do item a ser buscado\r\n         */\r\n        function searchItemId(lista: Array<any>, idItem: number) {\r\n            lista.sort((a, b) => {\r\n                return a.id > b.id;\r\n            });\r\n\r\n            let listaTamanho = lista.length,\r\n                meioLista = Math.round(listaTamanho / 2),\r\n                posiStart = idItem <= meioLista ? 0 : meioLista;\r\n\r\n            for (let i = posiStart; i < idItem; i++) {\r\n                if (lista[i].id === idItem) {\r\n                    return lista[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Função retorna o icone para o tipo especificado\r\n         * @param idclass classe de complementação para o icone\r\n         */\r\n        function getIcon(idclass:string):string{\r\n            let icon = {\r\n                computador: \"laptop\",\r\n                tablet: \"tablet\",\r\n                wifi: \"connection\"\r\n            }\r\n            return icon[idclass.toLowerCase().replace(/\\-/g, '')];            \r\n        }\r\n\r\n\r\n        /**\r\n         * Função para colocar mascara no formato de cpf no valor digitado\r\n         * @param val {string} - texto que receberá o tratamento\r\n         */\r\n        function maskCPF(val){\r\n            val = val.replace(/\\D/g,\"\")                    \r\n            val = val.replace(/(\\d{3})(\\d)/,\"$1.$2\")       \r\n            val = val.replace(/(\\d{3})(\\d)/,\"$1.$2\")       \r\n            val = val.replace(/(\\d{3})(\\d{1,2})$/,\"$1-$2\") \r\n            return val\r\n        }\r\n\r\n        /**\r\n         * Função para colocar mascara no formato de Telefone no valor digitado\r\n         * @param val {string} - texto que receberá o tratamento\r\n         */\r\n        function maskTel(val){\r\n            val = val.replace(/\\D/g,\"\");             \r\n            val = val.replace(/^(\\d{2})(\\d)/g,\"($1) $2\"); \r\n            val = val.replace(/(\\d)(\\d{4})$/,\"$1-$2\");    \r\n            return val;\r\n        }\r\n\r\n        /**\r\n         * Função para colocar mascara no formato de Data no valor digitado\r\n         * @param val {string} - texto que receberá o tratamento\r\n         */\r\n        function maskData(val){\r\n            val = val.replace(/\\D/g,\"\");                    \r\n            val = val.replace(/(\\d{2})(\\d)/,\"$1/$2\");\r\n            val = val.replace(/(\\d{2})(\\d)/,\"$1/$2\");\r\n            val = val.replace(/(\\d{2})(\\d{2})$/,\"$1$2\");\r\n            return val;\r\n        }\r\n\r\n           \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .factory(\"UtilHelpers\", UtilHelpers);\r\n}","/**\r\n * Gera a model para o fluxo da plataforma\r\n */\r\nnamespace APPWZ {\r\n    function PlatformsModel() {\r\n        let Model = {};\r\n\r\n        _newModel();\r\n        \r\n        return {\r\n            model: returnModel,\r\n            newModel: _newModel\r\n        };\r\n\r\n        /**\r\n         * Limpa a model e cria nova referencia\r\n         */\r\n        function _newModel() {\r\n            Model = {\r\n                Plataforma: \"\",\r\n                Plano: \"\",\r\n                Nome: \"\",\r\n                Email: \"\",\r\n                Nascimento: \"\",\r\n                CPF: \"\",\r\n                Telefone: \"\"\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Retorna a Model para uso na aplicação\r\n         */\r\n        function returnModel(){\r\n            return Model;\r\n        }        \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .factory(\"PlatformsModel\", PlatformsModel);\r\n}","/**\r\n * Serviço para planos que linka o backend com o front end da aplicação\r\n */\r\nnamespace APPWZ {\r\n    PlansService.$inject = [\"$http\", \"$q\", \"API\", \"MsgInfos\"];\r\n    function PlansService($http, $q, API, MsgInfos:IMgs) {\r\n        return {\r\n            getPlans: _getPlans\r\n        }\r\n \r\n        /**\r\n         * Busca os planos informados pela plataforma selecionada\r\n         * @param plan {string} id da plataforma selecionada\r\n         */\r\n        function _getPlans(plan:string){\r\n            let defer = $q.defer();\r\n            $http.get(`${API}planos/${plan}`)\r\n                .then( (result) => {\r\n                    result.data.planos.filter( (item) => item.ativo );\r\n                    defer.resolve(<Array<IPlanoWifi|IPlanoAparelho>>result.data.planos); \r\n                })\r\n                .catch( (err) => {\r\n                    console.error(err);\r\n                    MsgInfos.danger(`Não foi possível buscar os planos para a plataforma selecionada`);\r\n                    defer.reject(err);\r\n                });\r\n\r\n            return defer.promise;\r\n        }\r\n \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .service(\"PlansService\", PlansService);\r\n} ","/**\r\n * Serviços que linkando o backend com o front end da aplicação\r\n */\r\nnamespace APPWZ {\r\n    PlatformsService.$inject = [\"$http\", \"$q\", \"API\", \"MsgInfos\", \"UtilHelpers\"];\r\n    function PlatformsService($http, $q, API, MsgInfos:IMgs, Util) {\r\n        return {\r\n            getPlatforms: _getPlatforms\r\n        }\r\n \r\n        /**\r\n         * Busca todas as platafomas e as devolve com promise\r\n         */\r\n        function _getPlatforms(){\r\n            let defer = $q.defer();\r\n            $http.get(`${API}plataformas`)\r\n                .then( (result) => {\r\n                    result.data.plataformas.map((item:IPlatform)=>{\r\n                        item.descricao = item.descricao.replace(\"|\", \"\\n\");\r\n                    });\r\n                    defer.resolve(<Array<IPlatform>>result.data.plataformas); \r\n                })\r\n                .catch( (err) => {\r\n                    console.error(err);\r\n                    MsgInfos.danger(\"Não foi possível mostrar as plataformas\");\r\n                    defer.reject(err);\r\n                });\r\n\r\n            return defer.promise;\r\n        }\r\n \r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .service(\"PlatformsService\", PlatformsService);\r\n} ","/**\r\n * Serviço que conclui a aplicação\r\n */\r\nnamespace APPWZ {\r\n    RegisterService.$inject = [\"$http\", \"$q\", \"API\", \"MsgInfos\"];\r\n    function RegisterService($http, $q, API, MsgInfos:IMgs) {\r\n        return {\r\n            Salvar: _save,\r\n        }\r\n \r\n        /**\r\n         * Salva os dados do que foi selecionado e preenchido no fluxo da plataforma\r\n         * @param obj {Object} Model da plataforma\r\n         */\r\n        function _save(obj) {\r\n            let defer = $q.defer();\r\n\r\n            console.log(obj);\r\n            setTimeout(() => {\r\n                MsgInfos.success(\"Os dados foram enviados com sucesso!\");\r\n                defer.resolve();\r\n            }, 1000);\r\n            return defer.promise;\r\n        }\r\n\r\n    }\r\n\r\n    angular\r\n        .module(\"AppWooza\")\r\n        .service(\"RegisterService\", RegisterService);\r\n}"]}